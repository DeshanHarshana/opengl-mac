#include <gl/glut.h>
#include <Windows.h>
#include <iostream>
using namespace std;


void drawLine(GLint x1, GLint y1, GLint x2, GLint y2)

{
	int dx, dy, i, e;
	int incx, incy, inc1, inc2;
	int x, y;
	dx = x2 - x1;
	dy = y2 - y1;
	if (dx < 0) dx = -dx;
	if (dy < 0) dy = -dy;
	incx = 1;
	if (x2 < x1) incx = -1;
	incy = 1;
	if (y2 < y1) incy = -1;
	x = x1; y = y1;
	if (dx > dy)
	{
		glBegin(GL_POINTS); glVertex2i(x, y); glEnd();
		e = 2 * dy - dx;
		inc1 = 2 * (dy - dx);
		inc2 = 2 * dy;
		for (i = 0; i < dx; i++)
		{
			if (e >= 0)
			{
				y += incy;
				e += inc1;
			}
			else
				e += inc2;
			x += incx;
			glBegin(GL_POINTS); glVertex2i(x, y); glEnd();
		}
	}

	else
	{
		glBegin(GL_POINTS); glVertex2i(x, y); glEnd();
		e = 2 * dx - dy;
		inc1 = 2 * (dx - dy);
		inc2 = 2 * dx;
		for (i = 0; i < dy; i++)
		{
			if (e >= 0)
			{
				x += incx;
				e += inc1;
			}
			else
				e += inc2;
			y += incy;
			glBegin(GL_POINTS); glVertex2i(x, y); glEnd();
		}
	}


}



void fill() {
	glColor3f(1.0, 0.0, 0.0);
	glPointSize(2.0);
	GLfloat r = 100;
	GLfloat x = 0, y = r;
	GLfloat p = 1 - r;

	x = 0; y = r; p = 1 - r;
	
	while (x != y)
	{
		x++;
		if (p <= 0) {
			p = p + (2 * x) + 3;
		}
		else {

			p = p + 2 * (x - y) + 5;
			y--;
		}

		/*this parts add to complete whole circle*/
		/*bresenham lines*/
		drawLine(0, y, x, y);
		drawLine(0, y, -x, y);

		drawLine(0, -y, x, -y);
		drawLine(0, -y, -x, -y);

		drawLine(0, x, y, x);
		drawLine(0, x, -y, x);

		drawLine(0, -x, y, -x);
		drawLine(0, -x, -y, -x);
		
	}
	

	glFlush();
}

void circle() {
	glColor3f(1.0, 0.0, 0.0);
	glPointSize(2.0);
	GLfloat r = 100;
	GLfloat x = 0, y = r;
	GLfloat p = 1 - r;


	glBegin(GL_POINTS);
	while (x != y)
	{
		x++;
		if (p < 0) {
			p = p + (2 * x) + 3;
		}
		else {
			y--;
			p = p + 2 * (x - y) + 5;
		}

		/*this parts add to complete whole circle*/
		glVertex2i(x, y);
		glVertex2i(-x, y);

		glVertex2i(x, -y);
		glVertex2i(-x, -y);

		glVertex2i(y, x);
		glVertex2i(-y, x);

		glVertex2i(y, -x);
		glVertex2i(-y, -x);


	}
	glEnd();



	glFlush();
	fill();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Line Draw OpenGL");

	glClearColor(1.0, 1.0, 1.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	gluOrtho2D(-250, 250, -250, 250);
	glMatrixMode(GL_PROJECTION);
	glViewport(0, 0, 500, 500);

	glutDisplayFunc(circle);
	glutMainLoop();
	return 0;
}